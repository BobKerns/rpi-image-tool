#!/bin/bash

#### Load file data from a .tar, .tar.gz, .tgz, or .zip file, into new partitions on a new image file.
#### Usage:
####   ${PI_INVOKER} [--label <label>] [--boot-label <label>] [--root-uuid <uuid>] bootsize rootsize [inputfile]
####      inputfile defaults to -, meaning standard input. It can also be '', meaning skip loading files.

. "${PI_INCLUDES}/vars.sh"
. "${PI_INCLUDES}/partitions.sh"

LABEL_ID="$(printf "%04X%04X" $RANDOM $RANDOM)"
BOOT_ID="$(printf "%04X%04X%04X" $RANDOM $RANDOM $RANDOM)"
ROOT_ID="$(uuidcdef -u)"

while [ "${1:0:2}" = '--' ]; do
    case "$1" in
        --label)
            shift
            LABEL_ID="$1"
            shift
            ;;
        --boot-id)
            shift
            BOOT_ID="$1"
            shift
            ;;
        --root-id|--root-uuid)
            shift
            ROOT_ID="$1"
            shift
            ;;
        *)
            shift
            usage
            exit
            ;;
    esac
done


# Size of boot partition in sectors
BOOT_SIZE="${1:?Boot size}"
shift
# Size of root partition in sectors
ROOT_SIZE="${1:?Root size}"
shift
INPUT_FILE="${1--}"
shift

# We have to allow for the size of the disk label
LABEL_SIZE=$(( 8192 ))

DISK_SIZE=$(( LABEL_SIZE + BOOT_SIZE + ROOT_SIZE ))

image --clear

rm -f "${PI_IMAGE_FILE}"

#dd status=progress bs=512 count=$(( DISK_SIZE )) if=/dev/zero of="${PI_IMAGE_FILE}"
truncate --size=$(( DISK_SIZE * 512 )) "${PI_IMAGE_FILE}"

# Create disk label
sfdisk "${PI_IMAGE_FILE}" <<EOF
label: dos
label-id: ${LABEL_ID}

start=$(( LABEL_SIZE )), size=$(( BOOT_SIZE )), type=c
start=$(( LABEL_SIZE + BOOT_SIZE )), size=$(( ROOT_SIZE )), type=83
EOF

parterr=$?

[ $parterr ] || error $parterr -- "Could not write partition table."

find_partitions

# Initialize the filesystems

mkfs.fat -n "${BOOT_ID}" "${PI_BOOTDEV}" || error $? -- "Could not make boot filesystem"
mkfs.ext4 -U "${ROOT_ID}" "${PI_ROOTDEV}" || error $? -- "Could not make root filesystem"

# Mount the filesystems

do_mount "${PI_ROOTDEV:?}" "${PI_ROOT:?}"
do_mount "${PI_BOOTDEV:?}" "${PI_BOOT:?}"

#  Untar the files into the filesystem

if [ ! -z "${INPUT_FILE}" ]; then
    cd "${PI_ROOT}"
    tar xf "${INPUT_FILE}"
fi
