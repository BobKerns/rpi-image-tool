#!/bin/bash

#### Load file data from a .tar, .tar.gz, .tgz, or .zip file, into new partitions on a new image file.
#### Usage:
####   ${PI_INVOKER} [--label <label>] [--boot-label <label>] [--root-uuid <uuid>] bootsize rootsize [inputfile]
####      bootsize and rootsize are in MiB
####      inputfile defaults to -, meaning standard input. It can also be '', meaning skip loading files.

. "${PI_INCLUDES}/vars.sh"
. "${PI_INCLUDES}/partitions.sh"

shopt -s extglob

init_image() {
    local LABEL_ID="$(printf "%04X%04X" $RANDOM $RANDOM)"
    local BOOT_LABEL=boot
    local ROOT_LABEL=root
    local BOOT_ID="$(printf "%04X%04X" $RANDOM $RANDOM)"
    local ROOT_UUID="$(uuidcdef -u)"
    while [ "${1:0:2}" = '--' ]; do
        case "$1" in
            --label)
                shift
                LABEL_ID="$1"
                shift
                ;;
            --boot-id)
                shift
                BOOT_ID="$1"
                shift
                ;;
            --boot-label)
                shift
                BOOT_LABEL="$1"
                shift
                ;;
            --root-id)
                shift
                ROOT_ID="$1"
                shift
                ;;
            --root-uuid)
                shift
                ROOT_UUID="$1"
                shift
                ;;
            --root-label)
                shift
                ROOT_LABEL="$1"
                shift
                ;;
            *)
                shift
                usage "${PI_CMD}"
                exit
                ;;
        esac
    done

    local BOOT_SIZE=$(( ${1:?Boot Partition Size} * 2 * 1024 ))
    msg BOOT_SIZE=${BOOT_SIZE}
    local ROOT_SIZE=$(( ${2:?Root Partition Size} * 2 * 1024 ))
    msg ROOT_SIZE=${ROOT_SIZE}

    # We have to allow for the size of the disk label
    local LABEL_SIZE=$(( 8192 ))

    local DISK_SIZE=$(( LABEL_SIZE + BOOT_SIZE + ROOT_SIZE ))

    msg DISK_SIZE=${DISK_SIZE}

    image --clear

    rm -f "${PI_IMAGE_FILE}"

    truncate --size=$(( DISK_SIZE * 512 )) "${PI_IMAGE_FILE}"

    # Create disk label
    sfdisk "${PI_IMAGE_FILE}" <<EOF
label: dos
label-id: ${LABEL_ID}
unit: sectors

start=$(( LABEL_SIZE )), size=$(( BOOT_SIZE )), type=c
start=$(( LABEL_SIZE + BOOT_SIZE )), size=$(( ROOT_SIZE )), type=83
EOF

    parterr=$?

    [ $parterr ] || error $parterr -- "Could not write partition table."

    find_partitions

    # Initialize the filesystems

    mkfs.fat -i "${BOOT_ID}" -n "${BOOT_LABEL^^}" "${PI_BOOTDEV}" || error $? -- "Could not make boot filesystem"
    mkfs.ext4 -q -U "${ROOT_UUID}" -L "${ROOT_LABEL}" "${PI_ROOTDEV}" || error $? -- "Could not make root filesystem"

    # Mount the filesystems here as a sanity check.

    do_mount "${PI_ROOTDEV:?}" "${PI_ROOT:?}"
    do_mount "${PI_BOOTDEV:?}" "${PI_BOOT:?}"
}

load_partition() {
    local DEV="${1:?}"
    local MNT="${2:?}"
    shift 2
    # Mount the filesystems

    do_mount "${DEV}" "${MNT}" || error "Could not mount image"

    #  Untar the files into the filesystem

    cd "${MNT}"
    echo "Loading partition ${MNT}..."
    tar --extract --no-seek --acls --xattrs -selinux "${@}"
}

OPERATION="${1}"
shift
FILE="${1}"

case "${OPERATION}" in
    init)
        init_image "${@}"
        ;;
    boot)
        find_partitions
        load_partition "${PI_BOOTDEV:?}" "${PI_BOOT:?}" --no-same-owner --file "${1--}"
        ;;
    root)
        find_partitions
        load_partition "${PI_ROOTDEV:?}" "${PI_ROOT:?}" --sparse --xattrs --selinux --file "${1--}"
        ;;
    *)
        usage "${PI_CMD}"
        ;;
esac
