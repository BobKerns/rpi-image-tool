#!/bin/bash

#### Load an image file to be configured.
#### Usage:
####   ${PI_INVOKER} <imagefile>
####      Import the <imagefile> into the work volume
####      Pending modifications and saved originals are discarded.
####   ${PI_INVOKER} --clean
####       Clear the work volume.
####       This deletes all the files in the work volume. If you specify the work volume
####       manually, be certain you specify the correct one.
####   ${PI_INVOKER} --reset
####       Clear the pending work from the work volume.
####       This deletes all the pending modifications in the work volume.


clean() {
    msg "Emptying volume ${PI_VOLUME:?}"
    rm -rf /work/*
    exit
}

srcfile="${PI_IMAGE_FILE?:}_src.txt"

# Reset pending work, but leave the image file
reset() {
    rm -f "${srcfile}"  "${PI_PENDING?:}" "${PI_SAVED?:}"
}

# Clean up if we abort before completing the copy.
cleanup() {
    reset
    rm -f "${PI_IMAGE_FILE}"
}

install_image() {
    if [ ! -r "${PI_IMAGE_SRC_MOUNT}" ]; then
        msg "No image file supplied."
        usage
    fi
    rm -rf "${PI_TMP}" "${PI_SAVED}" "${PI_PENDING}"
    mkdir -p "${PI_TMP}" "${PI_SAVED}" "${PI_PENDING}"
    local ext="${PI_USER_IMAGE_FILE: -4}"
    trap cleanup EXIT
    if [ "${ext^^}" = '.ZIP' ]; then
        file="$(zipinfo -1 "${PI_IMAGE_SRC_MOUNT}" | head -1)"
        msg extracting "${PI_USER_IMAGE_FILE}/${file}" to "${PI_IMAGE_FILE}"
        unzip -p "${PI_IMAGE_SRC_MOUNT}" "${file}" >"${PI_IMAGE_FILE}"
        echo "${PI_IMAGE_USER_ABSOLUTE}/${file}" >"${srcfile}"
    else
        msg Copying "${PI_IMAGE_SRC_MOUNT}" to "${PI_IMAGE_FILE}"
        cp -fv "${PI_IMAGE_SRC_MOUNT}" "${PI_IMAGE_FILE}"
        echo "${PI_IMAGE_USER_ABSOLUTE}" >"${srcfile}"
    fi
    chmod u+w "${PI_IMAGE_FILE}"
    trap - EXIT
}

ls_file() {
    find "${1:?}" -type f -ls | (
        while read f1 f2 perms links usr grp size rest; do
            printf "  %7s %3s %8s %8s %11s %s\n" "${perms}" "${links}" "${usr}" "${grp}" "${size}" "${rest}"
        done
    )
}

# Show information about the installed image.
show_image() {
    if [ -w "${PI_IMAGE_FILE}" ]; then
        local src="$(cat "${PI_IMAGE_FILE}_src.txt")"
        echo "Image installed from ${src:-(unknown)}"
        ls_file "${PI_IMAGE_FILE}" "/work"
    else
        echo "No image has been installed."
    fi

    echo "Modifications pending:"
    ls_file "${PI_PENDING}/" "${PI_PENDING}" "  "
}

while [ "${1:0:2}" = '--' ]; do
    case "$1" in
        --clear|--clean)
            clean
            exit
            ;;
        --reset)
            reset
            exit
            ;;
        --require)
            [ -r "${PI_IMAGE_FILE}" ] || error "No image file is active."
            ;;
        --test)
            [ -r "${PI_IMAGE_FILE}" ] || exit 126
            exit 0
            ;;
        *)
            shift
            usage
            exit
            ;;
    esac
done

if [ -z "$1" ]; then
    show_image
else
    install_image
fi
