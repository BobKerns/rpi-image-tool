#!/usr/bin/env bash

## Set up a an auxilliary disk image to substitute for other attached storage.

# The docker image we will use.
export PI_BUILDER=rpiimagetool:latest

TYPE=ext4
REGISTRY_ROOT="${REGISTRY_ROOT-"${HOME}/.rpi-disks"}"

while [ "${1:0:2}" = '--' ]; do
    case "${1}" in
        --help|-h|'-?')
            name="$(basename -a "${0}")"
            cat <<EOF
Set up an auxiliary disk image that can substitute for other attached storage.

Usage:
${name} [--type (fat|ext4|none)] [--label label] [--uuid uuid] [--id id] filename size [content]
${name} --register [--type (fat|ext4|none)] [--label label] [--uuid uuid] [--id id] name size [content]
${name} --list [name]
${name} --find name
${name} --unregister name

size is in units of megabytes.
type is one of 'fat', 'ext4', or 'none' (default = ext4)
--label defaults to the basename of the file w/o .img or .dsk
--uuid and --id default to suitable random values.

--register, --list, --find, and --unregister work with images registered in our
registry, located in ${REGISTRY_ROOT}.
EOF
            exit
            ;;
        --register|--unregister|--find|--list)
            REGISTRY_OP="${1}"
            ;;
        --type)
            shift
            TYPE="${1}"
            ;;
        --label)
            shift
            LABEL="${1}"
            ;;
        --uuid)
            shift
            UUID="${1}"
            ;;
        --id)
            shift
            ID="${1}"
            ;;
        --type=*|--label=*|--uuid=*|--id=*)
            arg="${1}"
            shift
            # Inject the two-arg version.
            set -- "${1}" $(echo "${arg}" | sed -E "s/=/ /") "${@}"
            ;;
        *)
            echo "Unknown option ${1}" >&2
            exit 2
            ;;
    esac
    shift
done

# Extract a label name from a filename.
labelName() {
    echo "$(basename -a "${1}")" | sed -E 's/(.img|.image|dsk|.disk)$//'
}

dosify() {
    local label="${1:?Label}"
    echo "${label:0:11}" | tr '[:lower:]' '[:upper:]'
}

# Find the directory in the registry for the given name
findInRegistry() {
    local name="$(labelName "${1:?name}")"
    if [ -d "${REGISTRY_ROOT}/${name}" ]; then
        echo "${REGISTRY_ROOT}/${name}"
        return
    fi
    local file="$(find "${REGISTRY_ROOT}" \
        '(' \
            -name "LABEL=${name}" \
            -o -name "LABEL=$(dosify "${name}")" \
            -o -name "ID=${name}" \
            -o -name "UUID=${name}" \
        ')' \
        -print\
        | head -1)"
    if [ ! -z "${file}" ]; then
        echo "$(dirname "${file}")"
    fi
}

# Show the name, size, and label/id/uuid for a given drive
showDrive() {
    local drive="${1:?drive name}"
    local dir="${REGISTRY_ROOT}/${drive}"
    local size=$(( $(stat -f %z "${dir}/${drive}.disk") / (1024 * 1024)))
    echo "${drive}: size=${size} MB" \
        $(cd "${dir}"; ls {LABEL,ID,UUID}=* 2>/dev/null \
            | xargs -n 1 basename)
}

# Show the name, size, and label/id/uuid for all drives
showDrives() {
    for drive in $(find "${REGISTRY_ROOT}" -depth 1 -type d -print); do
        showDrive "$(basename -a "${drive}")"
    done
}

# Dispatch any specified registry op.
case "${REGISTRY_OP}" in
    --unregister)
        loc="$(findInRegistry "${1}")"
        rm -rf "${loc}"
        exit;
    ;;
    --register)
        drive="$(labelName "${1}")"
        loc="${REGISTRY_ROOT}/${drive}"
        # Replace any prior content
        rm -rf "${loc}"
        mkdir -p "${loc}"
        export FILE="${loc}/${drive}.disk"
        ;;
    --find)
        loc="$(findInRegistry "${1}")"
        drive="$(basename -a "${loc}")"
        if [ ! -z "${loc}" ]; then
            echo "${loc}/${drive}.disk"
        fi
        exit
        ;;
    --list)
        if [ -z "${1}" ]; then
            showDrives
        else
            showDrive "$(labelName "${1}")"
        fi
        exit
        ;;
    '')
        export FILE="${1:?Image filename}"
        ;;
esac

SIZE="${2-1}"
export CONTENT="${3}"

if [ -z "${CONTENT}" -a ! -z "$(echo "${SIZE}" | sed -E 's/[0-9]*//')" ]; then
    # SIZE omitted
    CONTENT="${SIZE}"
    SIZE=1
fi

LABEL="${LABEL:-"$(labelName "${FILE}")"}"
ID="${ID:-"$(printf "%04X%04X" $RANDOM $RANDOM)"}"
UUID="${UUID:-"$(docker run --rm --entrypoint '' "${PI_BUILDER}" uuidcdef -u)"}"

# Compute the absolute path for a possibly-relative pathname.
abspath() {
    if [[ -d "$1" ]]; then
        (cd "$1"; pwd)
    else
        (cd "$(dirname "$1")"; echo "$(pwd)/$(basename -a "$1")")
    fi
}

declare -a options=(
    --rm
    -v "$(abspath "${FILE}"):/mnt/img"
    --entrypoint=''
)

: >"${FILE}"
if [ "$(type -t truncate)" = 'file' ]; then
    # We have truncate!
    truncate --size=$(( SIZE * 1024 * 1024 )) "${FILE}"
    echo "${FILE} provisioned with ${SIZE} MB."
else
    # We don't have truncate, borrow it.
    docker run \
        "${options[@]}" \
        "${PI_BUILDER}"
        truncate --size=$(( SIZE * 1024 * 1024 )) /mnt/img
    echo "${FILE} provisioned with ${SIZE} MB."
fi

SCRIPT="/tmp/$$.$RANDOM.sh"

trap "rm -f '${SCRIPT}'" exit

cat >"${SCRIPT}" <<'EOF'
#!/bin/bash
EOF
chmod a+x "${SCRIPT}"

# Our next script involves accessing our image as a device, so will need to run privileged
options+=(
    --privileged
    -v "${SCRIPT}:/mnt/script"
    )

declare -a tar_options=()

case "${TYPE}" in
    ext4)
        echo "mkfs.ext4 -q -t ext4 -E discard -U '${UUID}' -L '${LABEL}' /mnt/img" >>"${SCRIPT}"
        tar_options+=( --acls )
        ;;
    dos|fat|fat32)
        TYPE=fat
        LABEL="$(dosify "${LABEL}")"
        echo "mkfs.fat -i '${ID}' -n '${LABEL}' /mnt/img" >>"${SCRIPT}"
        ;;
    none)
        ;;
    *)
        echo "Unknown filesystem type: ${TYPE}" 1>*2
        exit 2
        ;;
esac

docker run \
    "${options[@]}" \
    "${PI_BUILDER}" \
    /mnt/script


if [ ! -z "${CONTENT}" ]; then
    ABSCONTENT="$(abspath "${CONTENT}")"
    export TAR_OPTIONS="${tar_options[@]}"
    options+=(
        -v "${ABSCONTENT}:/mnt/content"
        --env CONTENT
        --env FILE
        --env TAR_OPTIONS
        )
    cat >"${SCRIPT}" <<'EOF'
#!/bin/bash
trap 'umount /mnt/data; losetup -d "${LOOP}"' exit
LOOP="$(losetup -f --show /mnt/img)"
mkdir /mnt/data
mount "${LOOP}" /mnt/data
echo "Copying ${CONTENT} into ${FILE}"
tar --create ${TAR_OPTIONS} --sparse --selinux --file - -C /mnt/content . \
| (cd /mnt/data; tar --extract ${TAR_OPTIONS} --selinux --file -)
EOF
    chmod a+x "${SCRIPT}"
    docker run \
        "${options[@]}" \
        "${PI_BUILDER}" \
        /mnt/script
fi

case "${REGISTRY_OP}" in
    --register)
        dir="$(dirname "${FILE}")"
        case "${TYPE}" in
            ext4)
                ln "${FILE}" "${dir}/LABEL=${LABEL}"
                ln "${FILE}" "${dir}/UUID=${UUID}"
                ;;
            fat)
                ln "${FILE}" "${dir}/LABEL=${LABEL}"
                ln "${FILE}" "${dir}/ID=${ID}"
                ;;
        esac
        ;;
esac
