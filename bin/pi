#!/bin/bash
# Boot a pi image into a temporary container for inspection.
# Usage: pi [--default|--nodefault] [--disk disk] [docker option]* <image> <cmd> <args>*
# --nodefault suppresses our default docker options
# Arg 1: image to run. Default: pi:latest
# Arg 2: Command to run. Default: bash
# Arg 3-n: Additonal args passed.

# The current working directory is mounted on /mnt/host, and made the working directory.
# This is done even if --nodefault is specified. (Otherwise, you could just use the
# docker command directly!)

DIR="$(basename -a "${0}")"
export PATH="${DIR}:${PATH}"

STARTUP="/tmp/$$.startup.$RANDOM.sh"
EXECSCRIPT="/tmp/$$.exec.$RANDOM.sh"
SHUTDOWN="/tmp/$$.shutdown.$RANDOM.sh"

declare -a options=()
declare -a opt_interactive=( --interactive )
declare -a opt_tty=( --tty )
declare -a opt_rm=( --rm )
declare -a disks=()
declare -a privileged=()
declare -a exec_options=()

# Our default working directory
WORKDIR=/mnt/host

cleanup() {
    if [ ! -z "${CID}" ]; then
        docker exec --privileged --user 0  --interactive "${CID}" /sbin/shutdown-script
        docker rm --volumes --force "${CID}"
    fi
    rm -rf "${STARTUP}" "${EXECSCRIPT}" "${SHUTDOWN}"
}

trap cleanup exit

while [ "${1:0:1}" = '-' ]; do
    case "${1}" in
        --no-interactive)
            opt_interactive=()
            ;;
        --interactive)
            opt_interactive=( --interactive )
            ;;
        --no-tty)
            opt_tty=()
            ;;
        --tty)
            opt_tty=( --tty )
            ;;
        --no-rm|--keep)
            opt_rm=()
            ;;
        --rm|--no-keep)
            opt_rm=( --rm )
            ;;
        # Canonicalize short options
        -a)
            shift
            set -- -a --attach "${@}"
            ;;
        -c)
            shift
            set -- -c --cpu-shares "${@}"
            ;;
        -d)
            shift
            set -- -d --detach "${@}"
            ;;
        -e)
            shift
            set -- -e --env "${@}"
            ;;
        -h)
            shift
            set -- -h --hostname "${@}"
            ;;
        -i)
            shift
            set -- -i --interactive "${@}"
            ;;
        -l)
            shift
            set -- -l --label "${@}"
            ;;
        -m)
            shift
            set -- -m --memory "${@}"
            ;;
        -p)
            shift
            set -- -p --publish "${@}"
            ;;
        -t)
            shift
            set -- -t --tty "${@}"
            ;;
        -u)
            shift
            set -- -u --user "${@}"
            ;;
        -v)
            shift
            set -- -v --volume "${@}"
            ;;
        -w)
            shift
            set -- -w --workdir "${@}"
            ;;
        --disk)
            shift
            disks+=( "${1}" )
            privileged=( --privileged )
            ;;
        --systemd)
            export SYSTEMD=yes
            privileged=( --privileged )
            options+=(
                --env SYSTEMD
                --tmpfs=/run
                )
            ;;
        --commit)
            export COMMIT=yes
            shift
            TAG="${1}"
            ;;
        --privileged)
            privileged=( --privileged )
            ;;
        # Options appearing as --option value for exec
        --detach-keys|--env|--envfile|--user)
            exec_options+=( "${1}" "${2}" )
            shift
            ;;
        --workdir)
            shift
            WORKDIR="${1}"
            ;;
        # Options appearing as --option value (w/o =) in the documentation,
        # or otherwise determined to work.
        --cidfile|--name|--network|-a|--attach\
        |--storage-opt|--tmpfs|--volume|--mount|-p|--tmpfs\
        |--expose|--label|--label-file\
        |--volumes-from|--gpus|--ulimit\
        |--isolation|--security-opt|-stop-timeout|--stop-signal\
        |--sysctl|--platform)
            options+=( "${1}" "${2}" )
            shift
            ;;
        --*=*|-*=*)
            options+=( $(echo "${1}" | sed -E 's/=/ /') )
            ;;
       --*)
            options+=( "${1}" )
            ;;
        # Split off combined short options
        -??*)
            ARG="${1}"
            shift
            set -- "${ARG}" "${ARG:0:2}" "-${ARG:2}" "${@}"
            ;;
    esac
    shift
done

# Add --privileged if requested or required
options+=( "${privileged[@]}" )

NAME="${1-pi:latest}"
shift

if [ -z "$*" ]; then
    # We default to bash
    set -- bash
fi

# Extract a label name from a filename.
labelName() {
    echo "$(basename -a "${1:?name}")" | sed -E 's/(.img|.image|dsk|.disk)$//'
}

# Compute the absolute path for a possibly-relative pathname.
abspath() {
    if [[ -d "$1" ]]; then
        (cd "$1"; pwd)
    else
        (cd "$(dirname "$1")"; echo "$(pwd)/$(basename -a "$1")")
    fi
}

declare -a disk_mounts=()
for d in "${disks[@]}"; do
    if [ ! -f "${d}" ]; then
        disk="$(setup-disk --find "${d}")"
    else
        disk="$(abspath "${d}")"
    fi
    if [ -z "${disk}" ]; then
        echo "Disk ${d} not found; skipping"
    else
        disk_mounts+=( -v "${disk}:/dev/host/$(labelName "${disk}")" )
    fi
done

cat>"${SHUTDOWN}" <<'EOF'
#!/bin/bash
echo SHUTDOWN
for d in /dev/host/*; do
    loop="$(losetup --associated "${d}" | cut -d ':' -f 1)"
    if [ ! -z "${loop}" ]; then
        umount --quiet "${loop}"
        losetup -d "${loop}"
    fi
done
EOF
chmod a+x "${SHUTDOWN}"

exec_options+=(
    "${opt_interactive[@]}"
    "${opt_tty[@]}"
    )

if [ "${SYSTEMD}" = 'yes' ]; then
    cat >"${STARTUP}" <<'EOF'
#!/bin/bash
declare -a loops=()
for d in /dev/host/*; do
    echo Setting up "${d}"
    loops+=( "$(losetup -f --show "${d}")" )
    echo "loops=(" "${loops[@]}" ")"
done
exec /usr/lib/systemd/systemd --unit=basic.target
EOF
    chmod a+x "${STARTUP}"
    CID="$(docker create \
        "${options[@]}" \
        --volume "${PWD}:/mnt/host" \
        "${disk_mounts[@]}" \
        --mount type=volume,source=rpi_apt_cache,destination=/var/cache/apt \
        --mount type=volume,source=rpi_apt_lib_cache,destination=/var/lib/apt \
        --volume "${STARTUP}:/sbin/startup-script" \
        --volume "${SHUTDOWN}:/sbin/shutdown-script" \
        --entrypoint="" \
        "${privileged[@]}" \
        "${NAME}" \
        /sbin/startup-script
        )"
    docker start "${CID}"
    echo >"${EXECSCRIPT}" <<'EOF'
#!/bin/bash
${ENTRYPOINT} "${@}"
EOF
    chmod a+x "${EXECSCRIPT}"
    docker exec \
        "${privileged[@]}" \
        "${exec_options[@]}" \
        "--workdir=${WORKDIR}" \
        "${CID}" \
        "${EXECSCRIPT}" "${@}"
     if [ "${COMMIT}" = 'yes' ]; then
        docker commit "${CID}" ${TAG}
     fi
     if [ ! -z "${opt_rm[*]}" ]; then
        docker rm --force --volumes "${CID}" >/dev/null
        unset CID
     fi
elif [ "${COMMIT}" = 'yes' ]; then
    cat >"${STARTUP}" <<'EOF'
#!/bin/bash
declare -a loops=()
if [ -d /dev/host ]; then
    for d in /dev/host/*; do
        echo Setting up "${d}"
        loops+=( "$(losetup -f --show "${d}")" )
        echo "loops=(" "${loops[@]}" ")"
    done
fi
${ENTRYPOINT} "${@}"
EOF
    chmod a+x "${STARTUP}"
    CID="$(docker create \
        "${options[@]}" \
        "${exec_options[@]}" \
        --volume "${PWD}:/mnt/host" \
        "${disk_mounts[@]}" \
        --mount type=volume,source=rpi_apt_cache,destination=/var/cache/apt \
        --mount type=volume,source=rpi_apt_lib_cache,destination=/var/lib/apt \
        --volume "${STARTUP}:/sbin/startup-script" \
        --volume "${SHUTDOWN}:/sbin/shutdown-script" \
        --entrypoint="/sbin/startup-script" \
        "${privileged[@]}" \
        "--workdir=${WORKDIR}" \
        "${NAME}" \
       "${@}"
        )"
    if docker start "${opt_interactive[@]}" --attach "${CID}"; then
        docker commit "${CID}" ${TAG} && echo "Commited image ${TAG}"
        if [ ! -z "${opt_rm[*]}" ]; then
            docker rm --force --volumes "${CID}" >/dev/null
            unset CID
        fi
    else
        err=$?
        echo "Error: $? â€” commit aborted." 1>&2
        exit ${err}
    fi
else
    cat >"${STARTUP}" <<'EOF'
#!/bin/bash
declare -a loops=()
unloop() {
    for l in "${loops[@]}"; do
        umount --quiet "${l}"
        losetup -d "${l}"
    done
}

trap unloop exit

if [ -d /dev/host ]; then
    for d in /dev/host/*; do
        echo Setting up "${d}"
        loops+=( "$(losetup -f --show "${d}")" )
        echo "loops=(" "${loops[@]}" ")"
    done
fi
${ENTRYPOINT} "${@}"
EOF
    chmod a+x "${STARTUP}"
    exec docker run \
        "${options[@]}" \
        "${exec_options[@]}" \
        "${opt_rm[@]}" \
        --volume "${PWD}:/mnt/host" \
        "${disk_mounts[@]}" \
        --mount type=volume,source=rpi_apt_cache,destination=/var/cache/apt \
        --mount type=volume,source=rpi_apt_lib_cache,destination=/var/lib/apt \
        "--workdir=${WORKDIR}" \
        --volume "${STARTUP}:/sbin/startup-script" \
        --entrypoint="/sbin/startup-script" \
        "${NAME}" \
        "${@}"
fi
