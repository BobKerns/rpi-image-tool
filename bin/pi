#!/bin/bash
# Boot a pi image into a temporary container for inspection.
# Usage: pi [--default|--nodefault] [docker option]* <image> <cmd> <args>*
# --nodefault suppresses our default docker options
# Arg 1: image to run. Default: pi:latest
# Arg 2: Command to run. Default: bash
# Arg 3-n: Additonal args passed.

# The current working directory is mounted on /host, and made the working directory.
# This is done even if --nodefault is specified. (Otherwise, you could just use the
# docker command directly!)

# Default options for docker

declare -a options=()
declare -a defaults=( -it --rm )
declare -a disks=()

while [ "${1:0:1}" = '-' ]; do
    case "${1}" in
        --nodefault)
            defaults=()
            ;;
        --default)
            defaults=( -it --rm )
            ;;
        --disk)
            shift
            disks+=( "${1}" )
        # Options appearing as --option value (w/o =) in the documentation.
        --cidfile|--name|--network|-a|--attach|-w|--workdir\
        |--storage-opt|--tmpfs|-v|--volume|--mount|-p|--tmpfs\
        |--expose|-e|--env|--envfile|-l|--label|--label-file\
        |--volumes-from|--gpus|--ulimit\
        |--isolation|--security-opt|-stop-timeout|--stop-signal\
        |--sysctl)
            options+=( "${1}" "${2}" )
            shift
            ;;
        --*=*|-*=*)
            options+=( $(echo "${1}" | sed -E 's/=/ /') )
            ;;
        *)
            options+=( "${1}" )
            ;;
    esac
    shift
done

NAME="${1-pi:latest}"
shift
export PI_CMD="${1-bash}"
shift

# Extract a label name from a filename.
labelName() {
    echo "$(basename -a "${1}")" | sed -E 's/(.img|.image|dsk|.disk)$//'
}

# Compute the absolute path for a possibly-relative pathname.
abspath() {
    if [[ -d "$1" ]]; then
        (cd "$1"; pwd)
    else
        (cd "$(dirname "$1")"; echo "$(pwd)/$(basename -a "$1")")
    fi
}

declare -a disk_mounts=()
for d in "${disks[@]}"; do
    if [ ! -r "${d}" ]; then
        disk="$(disk_setup --find "${d}")"
    else
        disk="$(abspath "${d}")"
    fi
    if [ -z "${disk}" ]; then
        echo "Disk ${d} not found; skipping"
    else
        disk_mounts+=( -v "${disk}:/dev/host/$(labelName ${disk}")" )
    fi
done

exec docker run "${defaults[@]}" "${options[@]}" \
  -v"${PWD}":/mnt/host \
  "${disk_mounts[@]}" \
  --mount type=volume,source=rpi_apt_cache,destination=/var/cache/apt \
  --mount type=volume,source=rpi_apt_lib_cache,destination=/var/lib/apt \
  --workdir=/mnt/host \
  "${NAME}" \
  "bash" -c "${PI_CMD}" "${PI_CMD}"  "$@"
