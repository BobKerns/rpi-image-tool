#!/bin/bash

#### This is the script that runs at container startup.
#### It mounts the specified disk image file, then runs
#### the supplied command.
####
#### Usage: ${PI_INVOKER} <cmd> <args*>
####   Root and boot filesystems will be mounted under ${PI_ROOT} and ${PI_BOOT}
####   and the supplied command will be executed.
####

export PI_INCLUDES="$(cd "$(dirname "$0")"; pwd)"
. "${PI_INCLUDES}/vars.sh"
. "${PI_INCLUDES}/partitions.sh"

declare -a options=()
while [ "${1:0:2}" = '--' ]; do
    case "$1" in
        --nomount)
            export PI_NO_MOUNT=yes
            shift
            ;;
        --term)
            shift
            export PI_TERM="${1:?}"
            shift
            options+=(--term "${PI_TERM}")
            ;;
        *)
            options+=("$1")
            shift
            ;;
    esac
done

if [ ! -z "${PI_TERM}" ]; then
    export TERM="${PI_TERM}"
    eval "$(tset -s)"
fi

export SUBCMD="${1}"

set -- "${options[@]}" "$@"


# Harmonize relative paths
cd /mnt/host

if [ -z "${SUBCMD}" ]; then
    export PI_INVOKER="${PI_INVOKER:-"$(basename -a "$0")"}"
    usage "$(basename -a "$0")"
    exit
else
    export PI_INVOKER="${PI_INVOKER} ${1}"
fi

# Allow overrides of default processing, notably mounting the image's
# filesystems. e.g.:
#   export PI_NO_MOUNT=yes

target="$(enable -n export; enable -n help; which -- "$1")"

if [ -f "${target}.override" ]; then
    . "${target}.override"
elif [ -f "/mnt/host/$1.override" ]; then
    . "/mnt/host/$1.override"
fi

if [ -z "${PI_NO_MOUNT}" ]; then
    do_mount_all
fi


# Allow these to be regular commands
enable -n help
enable -n export

verbose "RUN: $@"
"$@"
status=$?
if [ "${status}" = 127 ]; then
    msg ERROR: "$1 not found."
elif [ "${status}" = 126 ]; then
    :
elif [ "${status}" != 0 ]; then
    errmsg="$(errno "${status}" || echo "${status}")"
    msg ERROR: "${errmsg}"
else
    verbose "DONE: Exit OK"
fi

# Happens automatically on exit or SIGINT
#do_unmount_all

exit "${status}"
