#!/bin/bash

# This script bind-mounts the current directory into a privileged container to
# run the supplied script with the supplied image mounted

# Compute the absolute path for a possibly-relative pathname.
abspath() {
    if [[ -d "$1" ]]; then
        (cd "$1"; pwd)
    else
        (cd "$(dirname "$1")"; echo "$(pwd)/$(basename "$1")")
    fi
}

export PI_BUILDER=${PI_BUILDER:-rpiimagetool}

export PI_INVOKER_BASE="$(basename "$0")"
export PI_INVOKER="${PI_INVOKER_BASE} [--verbose|--debug] [--interactive] [--builder imagename] <.img file>"

# Parse any supplied options.
PI_IMAGE_FILE=
PI_IMAGE_FILE_DFLT=
declare -a options=()
INTERACTIVE="-i"
while [ -z "${PI_IMAGE_FILE}" -a ! -z "$*" ]; do
    case "$1" in
        --interactive|-i)
            INTERACTIVE="-it"
            export PI_INTERACTIVE=yes
            shift
            ;;
        --verbose|-v)
            # We will pass these on
            options+=(--verbose)
            shift
            ;;
        --debug|-d|-vv)
            # We will pass these on
            options+=(--debug)
            shift
            ;;
        --builder|-b)
            shift
            export PI_BUILDER="$1"
            shift
            ;;
        --help|'-?')
            shift
            options+=(--help)
            PI_IMAGE_FILE_DFLT='-'
            export PI_INVOKER="$(basename "$0")"
            ;;
        help)
            PI_IMAGE_FILE='-'
            export PI_INVOKER="$(basename "$0")"
            ;;
        *)
            PI_IMAGE_FILE="$1"
            shift
            ;;
        esac
done

# Special case known interactive programs with or without an image file.. In these cases, we want a PTY allocated

case "${PI_IMAGE_FILE}" in
    # Instead of image file
    bash)
        if [ -z "$*" ]; then
            ## Only if no arguments (e.g. scripts)
            export PI_INTERACTIVE=yes
        fi
        ;;
    emacs|vi|nano)
        export PI_INTERACTIVE=yes
        ;;
esac

# In addition to image file
case "$1" in
    bash)
        if [ "$*" = 'bash' ]; then
            ## Only if no arguments (e.g. scripts)
            export PI_INTERACTIVE=yes
        fi
        ;;
    emacs|vi|nano)
        export PI_INTERACTIVE=yes
        ;;
esac

if [ ! -z "${PI_INTERACTIVE}" ]; then
    INTERACTIVE='-it'
fi

export PI_USER_IMAGE_FILE="${PI_IMAGE_FILE}"
export PI_USER_CWD="$(pwd)"
export PI_USER_NAME="$(whoami)"

declare -a mounts exports mount_args export_args
mounts=()
exports=(
    PI_USER_CWD
    PI_USER_NAME
    PI_USER_IMAGE_FILE
    PI_INVOKER_BASE
    PI_INVOKER
    PI_INTERACTIVE
    PI_BUILDER
    )
mount_args=(-v"${PWD}:/data/local")
export_args=()

if [ "${PI_IMAGE_FILE}" != '-' ]; then
    if [ ! -z "${PI_IMAGE_FILE}" -a -r "${PI_IMAGE_FILE}" ]; then
        export PI_IMAGE_USER_ABSOLUTE="$(abspath "${PI_IMAGE_FILE}")"
        mounts+=(type=bind,source="${PI_IMAGE_USER_ABSOLUTE},target=/data/img")
        exports+=(PI_IMAGE_USER_ABSOLUTE)
    fi
fi

for i in  "${mounts[@]}"; do
    mount_args+=(--mount "${i}")
done

for i in  "${exports[@]}"; do
    export_args+=(--env "${i}")
done

CIDFILE="/tmp/$$.cid"
killContainer() {
    local CID="$(cat "${CIDFILE}")"
    rm "${CIDFILE}"
    echo "Stopping ${CID}" 1>&2
    docker stop -t 5 "${CID}" >/dev/null 2>&1
    exit 255
}

if [ "${INTERACTIVE}" = '-it' ]; then
    docker run --privileged --rm $INTERACTIVE \
        "${mount_args[@]}" \
        "${export_args[@]}" \
        --tmpfs /data/build/tmp:rw,noexec,nosuid,size=100M \
        "${PI_BUILDER}" "${options[@]}" "${PI_IMAGE_FILE:-"${PI_IMAGE_FILE_DFLT}"}" "$@"
else
    # When not in interactive mode, run docker in the background so that bash
    # can handle SIGINT and stop the container.
    trap killContainer INT
    docker run --privileged --rm $INTERACTIVE \
        --cidfile "${CIDFILE}" \
        "${mount_args[@]}" \
        "${export_args[@]}" \
        --tmpfs /data/build/tmp:rw,noexec,nosuid,size=100M \
        "${PI_BUILDER}" "${options[@]}" "${PI_IMAGE_FILE:-"${PI_IMAGE_FILE_DFLT}"}" "$@" &
    wait $!
fi
