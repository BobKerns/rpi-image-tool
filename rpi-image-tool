#!/bin/bash

# This script bind-mounts the current directory into a privileged container to
# run the supplied script with the supplied image mounted

abspath() {
    if [[ -d "$1" ]]; then
        (cd "$1"; pwd)
    else
        (cd "$(dirname "$1")"; echo "$(pwd)/$(basename "$1")")
    fi
}

export INVOKER_BASE="$(basename "$0")"
export INVOKER="${INVOKER_BASE} [--verbose|--debug] [--interactive] <.img file>"

# Parse any supplied options.
IMG=
OPTIONS=
INTERACTIVE="-i"
while [ -z "$IMG" -a ! -z "$*" ]; do
    case "$1" in
        --interactive|-i)
            INTERACTIVE="-it"
            shift
            ;;
        --verbose|--debug|-v|-d)
            # We will pass these on
            OPTIONS="${OPTIONS} $1"
            shift
            ;;
        --help|'-?')
            OPTIONS="${OPTIONS} $1"
            IMG='-'
            export INVOKER="$(basename "$0")"
            ;;
        help)
            IMG='-'
            export INVOKER="$(basename "$0")"
            ;;
        *)
            IMG="$1"
            shift
            ;;
        esac
done

# Special case bash being supplied either instead of or in addition to
# the image. In this case, we want a PTY allocated

if [ "${IMG}" = 'bash' ]; then
    INTERACTIVE="-it"
fi

if [ "$*" = 'bash' ]; then
    INTERACTIVE="-it"
fi

export USER_PWD="$(pwd)"
export USER_NAME="$(whoami)"

declare -a mounts exports mount_args export_args
mounts=()
exports=(USER_PWD USER_NAME INVOKER_BASE INVOKER)
mount_args=(-v"${PWD}:/data/local")
export_args=()

if [ "${IMG}" != '-' ]; then
    if [ ! -z "${IMG}" -a -r "${IMG}" ]; then
        export USER_ABSIMG="$(abspath "${IMG}")"
        mounts+=(type=bind,source="${USER_ABSIMG},target=/data/img")
        exports+=(USER_ABSIMG)
    fi
fi

for i in  "${mounts[@]}"; do
    mount_args+=(--mount "${i}")
done

for i in  "${exports[@]}"; do
    export_args+=(--env "${i}")
done

CIDFILE="/tmp/$$.cid"
killContainer() {
    local CID="$(cat "${CIDFILE}")"
    rm "${CIDFILE}"
    echo "Stopping ${CID}" 1>&2
    docker stop -t 5 "${CID}" >/dev/null 2>&1
    exit 255
}

if [ "${INTERACTIVE}" = '-it' ]; then
    docker run --privileged --rm $INTERACTIVE \
        "${mount_args[@]}" \
        "${export_args[@]}" \
        --tmpfs /data/build/tmp:rw,noexec,nosuid,size=100M \
        rpiimagetool "${IMG}" "$@"
else
    # When not in interactive mode, run docker in the background so that bash
    # can handle SIGINT and stop the container.
    trap killContainer INT
    docker run --privileged --rm $INTERACTIVE \
        --cidfile "${CIDFILE}" \
        "${mount_args[@]}" \
        "${export_args[@]}" \
        --tmpfs /data/build/tmp:rw,noexec,nosuid,size=100M \
        rpiimagetool $OPTIONS "${IMG}" "$@" &
    wait $!
fi
